# coding: utf-8

"""
    LoopBack Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fund_clearing_python_sdk.models.transfer import Transfer  # noqa: F401,E501
from fund_clearing_python_sdk.models.x_any import XAny  # noqa: F401,E501


class TransferRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'request_id': 'str',
        'details': 'Transfer',
        'from_bank_state': 'str',
        'to_bank_state': 'str',
        'state': 'str',
        'from_bank': 'XAny',
        'to_bank': 'XAny'
    }

    attribute_map = {
        '_class': '$class',
        'request_id': 'requestId',
        'details': 'details',
        'from_bank_state': 'fromBankState',
        'to_bank_state': 'toBankState',
        'state': 'state',
        'from_bank': 'fromBank',
        'to_bank': 'toBank'
    }

    def __init__(self, _class='org.clearing.TransferRequest', request_id=None, details=None, from_bank_state='PRE_PROCESS_COMPLETE', to_bank_state=None, state=None, from_bank=None, to_bank=None):  # noqa: E501
        """TransferRequest - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._request_id = None
        self._details = None
        self._from_bank_state = None
        self._to_bank_state = None
        self._state = None
        self._from_bank = None
        self._to_bank = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        self.request_id = request_id
        self.details = details
        self.from_bank_state = from_bank_state
        self.to_bank_state = to_bank_state
        self.state = state
        self.from_bank = from_bank
        self.to_bank = to_bank

    @property
    def _class(self):
        """Gets the _class of this TransferRequest.  # noqa: E501

        The class identifier for this type  # noqa: E501

        :return: The _class of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this TransferRequest.

        The class identifier for this type  # noqa: E501

        :param _class: The _class of this TransferRequest.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def request_id(self):
        """Gets the request_id of this TransferRequest.  # noqa: E501

        The instance identifier for this type  # noqa: E501

        :return: The request_id of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this TransferRequest.

        The instance identifier for this type  # noqa: E501

        :param request_id: The request_id of this TransferRequest.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def details(self):
        """Gets the details of this TransferRequest.  # noqa: E501


        :return: The details of this TransferRequest.  # noqa: E501
        :rtype: Transfer
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TransferRequest.


        :param details: The details of this TransferRequest.  # noqa: E501
        :type: Transfer
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def from_bank_state(self):
        """Gets the from_bank_state of this TransferRequest.  # noqa: E501


        :return: The from_bank_state of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._from_bank_state

    @from_bank_state.setter
    def from_bank_state(self, from_bank_state):
        """Sets the from_bank_state of this TransferRequest.


        :param from_bank_state: The from_bank_state of this TransferRequest.  # noqa: E501
        :type: str
        """
        if from_bank_state is None:
            raise ValueError("Invalid value for `from_bank_state`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "PROCESSING", "PRE_PROCESS_COMPLETE", "COMPLETE", "ERROR"]  # noqa: E501
        if from_bank_state not in allowed_values:
            raise ValueError(
                "Invalid value for `from_bank_state` ({0}), must be one of {1}"  # noqa: E501
                .format(from_bank_state, allowed_values)
            )

        self._from_bank_state = from_bank_state

    @property
    def to_bank_state(self):
        """Gets the to_bank_state of this TransferRequest.  # noqa: E501


        :return: The to_bank_state of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._to_bank_state

    @to_bank_state.setter
    def to_bank_state(self, to_bank_state):
        """Sets the to_bank_state of this TransferRequest.


        :param to_bank_state: The to_bank_state of this TransferRequest.  # noqa: E501
        :type: str
        """
        if to_bank_state is None:
            raise ValueError("Invalid value for `to_bank_state`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "PROCESSING", "PRE_PROCESS_COMPLETE", "COMPLETE", "ERROR"]  # noqa: E501
        if to_bank_state not in allowed_values:
            raise ValueError(
                "Invalid value for `to_bank_state` ({0}), must be one of {1}"  # noqa: E501
                .format(to_bank_state, allowed_values)
            )

        self._to_bank_state = to_bank_state

    @property
    def state(self):
        """Gets the state of this TransferRequest.  # noqa: E501


        :return: The state of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransferRequest.


        :param state: The state of this TransferRequest.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "PROCESSING", "PRE_PROCESS_COMPLETE", "COMPLETE", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def from_bank(self):
        """Gets the from_bank of this TransferRequest.  # noqa: E501

        The identifier of an instance of fromBank  # noqa: E501

        :return: The from_bank of this TransferRequest.  # noqa: E501
        :rtype: XAny
        """
        return self._from_bank

    @from_bank.setter
    def from_bank(self, from_bank):
        """Sets the from_bank of this TransferRequest.

        The identifier of an instance of fromBank  # noqa: E501

        :param from_bank: The from_bank of this TransferRequest.  # noqa: E501
        :type: XAny
        """
        if from_bank is None:
            raise ValueError("Invalid value for `from_bank`, must not be `None`")  # noqa: E501

        self._from_bank = from_bank

    @property
    def to_bank(self):
        """Gets the to_bank of this TransferRequest.  # noqa: E501

        The identifier of an instance of toBank  # noqa: E501

        :return: The to_bank of this TransferRequest.  # noqa: E501
        :rtype: XAny
        """
        return self._to_bank

    @to_bank.setter
    def to_bank(self, to_bank):
        """Sets the to_bank of this TransferRequest.

        The identifier of an instance of toBank  # noqa: E501

        :param to_bank: The to_bank of this TransferRequest.  # noqa: E501
        :type: XAny
        """
        if to_bank is None:
            raise ValueError("Invalid value for `to_bank`, must not be `None`")  # noqa: E501

        self._to_bank = to_bank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
