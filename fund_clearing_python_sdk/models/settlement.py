# coding: utf-8

"""
    LoopBack Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fund_clearing_python_sdk.models.x_any import XAny  # noqa: F401,E501


class Settlement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'amount': 'float',
        'currency': 'str',
        'creditor_bank': 'XAny',
        'debtor_bank': 'XAny',
        'id': 'str'
    }

    attribute_map = {
        '_class': '$class',
        'amount': 'amount',
        'currency': 'currency',
        'creditor_bank': 'creditorBank',
        'debtor_bank': 'debtorBank',
        'id': 'id'
    }

    def __init__(self, _class='org.clearing.Settlement', amount=None, currency=None, creditor_bank=None, debtor_bank=None, id=None):  # noqa: E501
        """Settlement - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._amount = None
        self._currency = None
        self._creditor_bank = None
        self._debtor_bank = None
        self._id = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        self.amount = amount
        self.currency = currency
        self.creditor_bank = creditor_bank
        self.debtor_bank = debtor_bank
        if id is not None:
            self.id = id

    @property
    def _class(self):
        """Gets the _class of this Settlement.  # noqa: E501

        The class identifier for this type  # noqa: E501

        :return: The _class of this Settlement.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Settlement.

        The class identifier for this type  # noqa: E501

        :param _class: The _class of this Settlement.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def amount(self):
        """Gets the amount of this Settlement.  # noqa: E501


        :return: The amount of this Settlement.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Settlement.


        :param amount: The amount of this Settlement.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Settlement.  # noqa: E501


        :return: The currency of this Settlement.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Settlement.


        :param currency: The currency of this Settlement.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["EURO", "STERLING", "USD", "YEN", "CHF", "CAD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def creditor_bank(self):
        """Gets the creditor_bank of this Settlement.  # noqa: E501

        The identifier of an instance of creditorBank  # noqa: E501

        :return: The creditor_bank of this Settlement.  # noqa: E501
        :rtype: XAny
        """
        return self._creditor_bank

    @creditor_bank.setter
    def creditor_bank(self, creditor_bank):
        """Sets the creditor_bank of this Settlement.

        The identifier of an instance of creditorBank  # noqa: E501

        :param creditor_bank: The creditor_bank of this Settlement.  # noqa: E501
        :type: XAny
        """
        if creditor_bank is None:
            raise ValueError("Invalid value for `creditor_bank`, must not be `None`")  # noqa: E501

        self._creditor_bank = creditor_bank

    @property
    def debtor_bank(self):
        """Gets the debtor_bank of this Settlement.  # noqa: E501

        The identifier of an instance of debtorBank  # noqa: E501

        :return: The debtor_bank of this Settlement.  # noqa: E501
        :rtype: XAny
        """
        return self._debtor_bank

    @debtor_bank.setter
    def debtor_bank(self, debtor_bank):
        """Sets the debtor_bank of this Settlement.

        The identifier of an instance of debtorBank  # noqa: E501

        :param debtor_bank: The debtor_bank of this Settlement.  # noqa: E501
        :type: XAny
        """
        if debtor_bank is None:
            raise ValueError("Invalid value for `debtor_bank`, must not be `None`")  # noqa: E501

        self._debtor_bank = debtor_bank

    @property
    def id(self):
        """Gets the id of this Settlement.  # noqa: E501


        :return: The id of this Settlement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settlement.


        :param id: The id of this Settlement.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settlement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
