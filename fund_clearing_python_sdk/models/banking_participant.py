# coding: utf-8

"""
    LoopBack Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankingParticipant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'banking_id': 'str',
        'banking_name': 'str',
        'working_currency': 'str',
        'fund_balance': 'float'
    }

    attribute_map = {
        '_class': '$class',
        'banking_id': 'bankingId',
        'banking_name': 'bankingName',
        'working_currency': 'workingCurrency',
        'fund_balance': 'fundBalance'
    }

    def __init__(self, _class='org.clearing.BankingParticipant', banking_id=None, banking_name=None, working_currency='USD', fund_balance=5000000.0):  # noqa: E501
        """BankingParticipant - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._banking_id = None
        self._banking_name = None
        self._working_currency = None
        self._fund_balance = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        self.banking_id = banking_id
        self.banking_name = banking_name
        self.working_currency = working_currency
        self.fund_balance = fund_balance

    @property
    def _class(self):
        """Gets the _class of this BankingParticipant.  # noqa: E501

        The class identifier for this type  # noqa: E501

        :return: The _class of this BankingParticipant.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this BankingParticipant.

        The class identifier for this type  # noqa: E501

        :param _class: The _class of this BankingParticipant.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def banking_id(self):
        """Gets the banking_id of this BankingParticipant.  # noqa: E501

        The instance identifier for this type  # noqa: E501

        :return: The banking_id of this BankingParticipant.  # noqa: E501
        :rtype: str
        """
        return self._banking_id

    @banking_id.setter
    def banking_id(self, banking_id):
        """Sets the banking_id of this BankingParticipant.

        The instance identifier for this type  # noqa: E501

        :param banking_id: The banking_id of this BankingParticipant.  # noqa: E501
        :type: str
        """
        if banking_id is None:
            raise ValueError("Invalid value for `banking_id`, must not be `None`")  # noqa: E501

        self._banking_id = banking_id

    @property
    def banking_name(self):
        """Gets the banking_name of this BankingParticipant.  # noqa: E501


        :return: The banking_name of this BankingParticipant.  # noqa: E501
        :rtype: str
        """
        return self._banking_name

    @banking_name.setter
    def banking_name(self, banking_name):
        """Sets the banking_name of this BankingParticipant.


        :param banking_name: The banking_name of this BankingParticipant.  # noqa: E501
        :type: str
        """
        if banking_name is None:
            raise ValueError("Invalid value for `banking_name`, must not be `None`")  # noqa: E501

        self._banking_name = banking_name

    @property
    def working_currency(self):
        """Gets the working_currency of this BankingParticipant.  # noqa: E501


        :return: The working_currency of this BankingParticipant.  # noqa: E501
        :rtype: str
        """
        return self._working_currency

    @working_currency.setter
    def working_currency(self, working_currency):
        """Sets the working_currency of this BankingParticipant.


        :param working_currency: The working_currency of this BankingParticipant.  # noqa: E501
        :type: str
        """
        if working_currency is None:
            raise ValueError("Invalid value for `working_currency`, must not be `None`")  # noqa: E501
        allowed_values = ["EURO", "STERLING", "USD", "YEN", "CHF", "CAD"]  # noqa: E501
        if working_currency not in allowed_values:
            raise ValueError(
                "Invalid value for `working_currency` ({0}), must be one of {1}"  # noqa: E501
                .format(working_currency, allowed_values)
            )

        self._working_currency = working_currency

    @property
    def fund_balance(self):
        """Gets the fund_balance of this BankingParticipant.  # noqa: E501


        :return: The fund_balance of this BankingParticipant.  # noqa: E501
        :rtype: float
        """
        return self._fund_balance

    @fund_balance.setter
    def fund_balance(self, fund_balance):
        """Sets the fund_balance of this BankingParticipant.


        :param fund_balance: The fund_balance of this BankingParticipant.  # noqa: E501
        :type: float
        """
        if fund_balance is None:
            raise ValueError("Invalid value for `fund_balance`, must not be `None`")  # noqa: E501

        self._fund_balance = fund_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingParticipant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
