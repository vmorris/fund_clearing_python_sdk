# coding: utf-8

"""
    LoopBack Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from fund_clearing_python_sdk.models.settlement import Settlement  # noqa: F401,E501
from fund_clearing_python_sdk.models.x_any import XAny  # noqa: F401,E501


class BatchTransferRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'batch_id': 'str',
        'settlement': 'Settlement',
        'state': 'str',
        'parties': 'list[XAny]',
        'transfer_requests': 'list[XAny]'
    }

    attribute_map = {
        '_class': '$class',
        'batch_id': 'batchId',
        'settlement': 'settlement',
        'state': 'state',
        'parties': 'parties',
        'transfer_requests': 'transferRequests'
    }

    def __init__(self, _class='org.clearing.BatchTransferRequest', batch_id=None, settlement=None, state=None, parties=None, transfer_requests=None):  # noqa: E501
        """BatchTransferRequest - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._batch_id = None
        self._settlement = None
        self._state = None
        self._parties = None
        self._transfer_requests = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        self.batch_id = batch_id
        self.settlement = settlement
        self.state = state
        self.parties = parties
        self.transfer_requests = transfer_requests

    @property
    def _class(self):
        """Gets the _class of this BatchTransferRequest.  # noqa: E501

        The class identifier for this type  # noqa: E501

        :return: The _class of this BatchTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this BatchTransferRequest.

        The class identifier for this type  # noqa: E501

        :param _class: The _class of this BatchTransferRequest.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchTransferRequest.  # noqa: E501

        The instance identifier for this type  # noqa: E501

        :return: The batch_id of this BatchTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchTransferRequest.

        The instance identifier for this type  # noqa: E501

        :param batch_id: The batch_id of this BatchTransferRequest.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def settlement(self):
        """Gets the settlement of this BatchTransferRequest.  # noqa: E501


        :return: The settlement of this BatchTransferRequest.  # noqa: E501
        :rtype: Settlement
        """
        return self._settlement

    @settlement.setter
    def settlement(self, settlement):
        """Sets the settlement of this BatchTransferRequest.


        :param settlement: The settlement of this BatchTransferRequest.  # noqa: E501
        :type: Settlement
        """
        if settlement is None:
            raise ValueError("Invalid value for `settlement`, must not be `None`")  # noqa: E501

        self._settlement = settlement

    @property
    def state(self):
        """Gets the state of this BatchTransferRequest.  # noqa: E501


        :return: The state of this BatchTransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BatchTransferRequest.


        :param state: The state of this BatchTransferRequest.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING_PRE_PROCESS", "READY_TO_SETTLE", "PENDING_POST_PROCESS", "COMPLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def parties(self):
        """Gets the parties of this BatchTransferRequest.  # noqa: E501

        The identifier of an instance of parties  # noqa: E501

        :return: The parties of this BatchTransferRequest.  # noqa: E501
        :rtype: list[XAny]
        """
        return self._parties

    @parties.setter
    def parties(self, parties):
        """Sets the parties of this BatchTransferRequest.

        The identifier of an instance of parties  # noqa: E501

        :param parties: The parties of this BatchTransferRequest.  # noqa: E501
        :type: list[XAny]
        """
        if parties is None:
            raise ValueError("Invalid value for `parties`, must not be `None`")  # noqa: E501

        self._parties = parties

    @property
    def transfer_requests(self):
        """Gets the transfer_requests of this BatchTransferRequest.  # noqa: E501

        The identifier of an instance of transferRequests  # noqa: E501

        :return: The transfer_requests of this BatchTransferRequest.  # noqa: E501
        :rtype: list[XAny]
        """
        return self._transfer_requests

    @transfer_requests.setter
    def transfer_requests(self, transfer_requests):
        """Sets the transfer_requests of this BatchTransferRequest.

        The identifier of an instance of transferRequests  # noqa: E501

        :param transfer_requests: The transfer_requests of this BatchTransferRequest.  # noqa: E501
        :type: list[XAny]
        """
        if transfer_requests is None:
            raise ValueError("Invalid value for `transfer_requests`, must not be `None`")  # noqa: E501

        self._transfer_requests = transfer_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchTransferRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
