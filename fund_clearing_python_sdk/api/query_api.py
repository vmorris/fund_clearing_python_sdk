# coding: utf-8

"""
    LoopBack Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fund_clearing_python_sdk.api_client import ApiClient


class QueryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def query_batch_transfer_request_by_id(self, batch_id, **kwargs):  # noqa: E501
        """Select a BatchTransferRequest by the UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_request_by_id(batch_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str batch_id: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_batch_transfer_request_by_id_with_http_info(batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_batch_transfer_request_by_id_with_http_info(batch_id, **kwargs)  # noqa: E501
            return data

    def query_batch_transfer_request_by_id_with_http_info(self, batch_id, **kwargs):  # noqa: E501
        """Select a BatchTransferRequest by the UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_request_by_id_with_http_info(batch_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str batch_id: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_batch_transfer_request_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `query_batch_transfer_request_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'batch_id' in params:
            query_params.append(('batchId', params['batch_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/BatchTransferRequestById', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BatchTransferRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_batch_transfer_request_for_banks_in_state(self, error_unknown, error_unknown2, state, **kwargs):  # noqa: E501
        """Select all BatchTransferRequests in a given state for two participating banks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_request_for_banks_in_state(error_unknown, error_unknown2, state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str error_unknown: (required)
        :param str error_unknown2: (required)
        :param str state: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_batch_transfer_request_for_banks_in_state_with_http_info(error_unknown, error_unknown2, state, **kwargs)  # noqa: E501
        else:
            (data) = self.query_batch_transfer_request_for_banks_in_state_with_http_info(error_unknown, error_unknown2, state, **kwargs)  # noqa: E501
            return data

    def query_batch_transfer_request_for_banks_in_state_with_http_info(self, error_unknown, error_unknown2, state, **kwargs):  # noqa: E501
        """Select all BatchTransferRequests in a given state for two participating banks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_request_for_banks_in_state_with_http_info(error_unknown, error_unknown2, state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str error_unknown: (required)
        :param str error_unknown2: (required)
        :param str state: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_unknown', 'error_unknown2', 'state']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_batch_transfer_request_for_banks_in_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_unknown' is set
        if ('error_unknown' not in params or
                params['error_unknown'] is None):
            raise ValueError("Missing the required parameter `error_unknown` when calling `query_batch_transfer_request_for_banks_in_state`")  # noqa: E501
        # verify the required parameter 'error_unknown2' is set
        if ('error_unknown2' not in params or
                params['error_unknown2'] is None):
            raise ValueError("Missing the required parameter `error_unknown2` when calling `query_batch_transfer_request_for_banks_in_state`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `query_batch_transfer_request_for_banks_in_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'error_unknown' in params:
            query_params.append(('', params['error_unknown']))  # noqa: E501
        if 'error_unknown2' in params:
            query_params.append(('', params['error_unknown2']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/BatchTransferRequestForBanksInState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BatchTransferRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_batch_transfer_requests_by_bank_in_state(self, party, state, **kwargs):  # noqa: E501
        """Select all BatchTransferRequests in a given state for a participating bank  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_requests_by_bank_in_state(party, state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str party: (required)
        :param str state: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_batch_transfer_requests_by_bank_in_state_with_http_info(party, state, **kwargs)  # noqa: E501
        else:
            (data) = self.query_batch_transfer_requests_by_bank_in_state_with_http_info(party, state, **kwargs)  # noqa: E501
            return data

    def query_batch_transfer_requests_by_bank_in_state_with_http_info(self, party, state, **kwargs):  # noqa: E501
        """Select all BatchTransferRequests in a given state for a participating bank  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_batch_transfer_requests_by_bank_in_state_with_http_info(party, state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str party: (required)
        :param str state: (required)
        :return: list[BatchTransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['party', 'state']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_batch_transfer_requests_by_bank_in_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'party' is set
        if ('party' not in params or
                params['party'] is None):
            raise ValueError("Missing the required parameter `party` when calling `query_batch_transfer_requests_by_bank_in_state`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `query_batch_transfer_requests_by_bank_in_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'party' in params:
            query_params.append(('party', params['party']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/BatchTransferRequestsByBankInState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BatchTransferRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_transfer_requests_by_bank_in_state(self, bank, **kwargs):  # noqa: E501
        """Select all TransferRequests for a participating bank in a given state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_transfer_requests_by_bank_in_state(bank, async=True)
        >>> result = thread.get()

        :param async bool
        :param str bank: (required)
        :return: list[TransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_transfer_requests_by_bank_in_state_with_http_info(bank, **kwargs)  # noqa: E501
        else:
            (data) = self.query_transfer_requests_by_bank_in_state_with_http_info(bank, **kwargs)  # noqa: E501
            return data

    def query_transfer_requests_by_bank_in_state_with_http_info(self, bank, **kwargs):  # noqa: E501
        """Select all TransferRequests for a participating bank in a given state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_transfer_requests_by_bank_in_state_with_http_info(bank, async=True)
        >>> result = thread.get()

        :param async bool
        :param str bank: (required)
        :return: list[TransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_transfer_requests_by_bank_in_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank' is set
        if ('bank' not in params or
                params['bank'] is None):
            raise ValueError("Missing the required parameter `bank` when calling `query_transfer_requests_by_bank_in_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bank' in params:
            query_params.append(('bank', params['bank']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/TransferRequestsByBankInState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransferRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_transfer_requests_by_banks_in_state(self, bank1, bank2, state, bank3, bank4, state2, **kwargs):  # noqa: E501
        """Select all TransferRequests for a participating bank in a given state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_transfer_requests_by_banks_in_state(bank1, bank2, state, bank3, bank4, state2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str bank1: (required)
        :param str bank2: (required)
        :param str state: (required)
        :param str bank3: (required)
        :param str bank4: (required)
        :param str state2: (required)
        :return: list[TransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_transfer_requests_by_banks_in_state_with_http_info(bank1, bank2, state, bank3, bank4, state2, **kwargs)  # noqa: E501
        else:
            (data) = self.query_transfer_requests_by_banks_in_state_with_http_info(bank1, bank2, state, bank3, bank4, state2, **kwargs)  # noqa: E501
            return data

    def query_transfer_requests_by_banks_in_state_with_http_info(self, bank1, bank2, state, bank3, bank4, state2, **kwargs):  # noqa: E501
        """Select all TransferRequests for a participating bank in a given state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_transfer_requests_by_banks_in_state_with_http_info(bank1, bank2, state, bank3, bank4, state2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str bank1: (required)
        :param str bank2: (required)
        :param str state: (required)
        :param str bank3: (required)
        :param str bank4: (required)
        :param str state2: (required)
        :return: list[TransferRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank1', 'bank2', 'state', 'bank3', 'bank4', 'state2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_transfer_requests_by_banks_in_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank1' is set
        if ('bank1' not in params or
                params['bank1'] is None):
            raise ValueError("Missing the required parameter `bank1` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501
        # verify the required parameter 'bank2' is set
        if ('bank2' not in params or
                params['bank2'] is None):
            raise ValueError("Missing the required parameter `bank2` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501
        # verify the required parameter 'bank3' is set
        if ('bank3' not in params or
                params['bank3'] is None):
            raise ValueError("Missing the required parameter `bank3` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501
        # verify the required parameter 'bank4' is set
        if ('bank4' not in params or
                params['bank4'] is None):
            raise ValueError("Missing the required parameter `bank4` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501
        # verify the required parameter 'state2' is set
        if ('state2' not in params or
                params['state2'] is None):
            raise ValueError("Missing the required parameter `state2` when calling `query_transfer_requests_by_banks_in_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bank1' in params:
            query_params.append(('bank1', params['bank1']))  # noqa: E501
        if 'bank2' in params:
            query_params.append(('bank2', params['bank2']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'bank3' in params:
            query_params.append(('bank2', params['bank3']))  # noqa: E501
        if 'bank4' in params:
            query_params.append(('bank1', params['bank4']))  # noqa: E501
        if 'state2' in params:
            query_params.append(('state', params['state2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/TransferRequestsByBanksInState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransferRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
